// Generated by CoffeeScript 1.7.1
(function() {
  var Worker, cp, exports;

  cp = require('child_process');

  Worker = (function() {
    function Worker(master) {
      if (master) {
        this.master = master;
      }
      this.functions = this.master.functions;
      this.pid = process.pid;
    }

    Worker.prototype.start = function() {
      process.send({
        type: 'message',
        message: "Worker starts at " + this.pid
      });
      return process.once('message', (function(_this) {
        return function(message) {
          if (message.type === 'register' && message.pid === _this.pid) {
            return _this.working();
          } else {
            process.send({
              type: 'error',
              errorType: 'registerFailed'
            });
            return process.exit(0);
          }
        };
      })(this));
    };

    Worker.prototype.working = function() {
      process.on('message', (function(_this) {
        return function(message) {
          return _this.handleMasterMessage(message);
        };
      })(this));
      return process.send({
        type: 'pullTask',
        pid: this.pid
      });
    };

    Worker.prototype.handleMasterMessage = function(message) {
      switch (message.type) {
        case 'deal':
          return this.deal(message.task);
        case 'exit':
          process.send({
            type: 'exit',
            pid: this.pid
          });
          return process.exit(0);
      }
    };

    Worker.prototype.deal = function(task) {
      var error, result;
      try {
        result = this.functions[task.id](task.target);
        return process.send({
          type: 'result',
          result: result,
          task: task
        });
      } catch (_error) {
        error = _error;
        return process.send({
          type: 'error',
          task: task,
          result: error
        });
      }
    };

    Worker.prototype.fork = function(id) {
      return this.proc = cp.fork(this.master.cmd);
    };

    return Worker;

  })();

  exports = module.exports = Worker;

}).call(this);
